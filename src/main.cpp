#define PxMATRIX_SPI_FREQUENCY 10000000

#include <Arduino.h>
#include <PxMatrix.h>
#include <Super_Mario_Bros__24pt7b.h>

#include "ui/ui.h"


#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 16
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

// Pins for LED MATRIX

#define matrix_width 64
#define matrix_height 64




// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=50; //10-50 is usually fine

// PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C);
//PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};


const unsigned short MASK = 0xF81F;



const unsigned short block[361] PROGMEM={
0xF81F, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40, 0x9A40,   // 0x0010 (16) pixels
0x9A40, 0x9A40, 0xF81F, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0020 (32) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0030 (48) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0040 (64) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0050 (80) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40,   // 0x0060 (96) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0070 (112) pixels
0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0080 (128) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0090 (144) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x00A0 (160) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x00B0 (176) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4,   // 0x00C0 (192) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x00D0 (208) pixels
0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x00E0 (224) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x00F0 (240) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0100 (256) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0110 (272) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0x0000,   // 0x0120 (288) pixels
0x0000, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0x0000,   // 0x0130 (304) pixels
0x9A40, 0xE4E4, 0x0000, 0x0000, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000,   // 0x0140 (320) pixels
0x0000, 0xE4E4, 0x0000, 0x9A40, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4,   // 0x0150 (336) pixels
0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0xE4E4, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0160 (352) pixels
};

const unsigned short bush[189] PROGMEM={
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
0xF81F, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0x0000,   // 0x0020 (32) pixels
0xF81F, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0x0000, 0xBFE3, 0x0000, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0x0000, 0xF81F,   // 0x0040 (64) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0x0560, 0xBFE3, 0xBFE3, 0x0000, 0xF81F, 0x0000, 0xBFE3,   // 0x0050 (80) pixels
0xBFE3, 0xBFE3, 0x0560, 0xBFE3, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xBFE3, 0x0560, 0x0560, 0xBFE3, 0xBFE3, 0x0560,   // 0x0060 (96) pixels
0xBFE3, 0xBFE3, 0x0000, 0xBFE3, 0x0560, 0x0560, 0xBFE3, 0xBFE3, 0x0560, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xBFE3, 0x0560,   // 0x0070 (112) pixels
0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0x0560, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xF81F, 0xF81F,   // 0x0080 (128) pixels
0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3,   // 0x0090 (144) pixels
0xBFE3, 0xBFE3, 0xBFE3, 0xF81F, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3,   // 0x00A0 (160) pixels
0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xF81F, 0x0000, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3,   // 0x00B0 (176) pixels
0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3, 0xBFE3 };

const unsigned short cloud1[156] PROGMEM={
0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
0xFFFF, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0020 (32) pixels
0x0000, 0xF81F, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF,   // 0x0030 (48) pixels
0x0000, 0xF81F, 0xF81F, 0xF81F, 0x3DFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F,   // 0x0040 (64) pixels
0xF81F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F, 0xFFFF, 0xFFFF,   // 0x0050 (80) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0060 (96) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xFFFF, 0xFFFF, 0xFFFF, 0x3DFF, 0x3DFF, 0xFFFF, 0x3DFF, 0xFFFF,   // 0x0070 (112) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F, 0x3DFF, 0x3DFF, 0x3DFF, 0xFFFF, 0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,   // 0x0080 (128) pixels
0xF81F, 0xF81F, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0090 (144) pixels
0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F };

const unsigned short cloud2[156] PROGMEM={
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0x3DFF, 0xFFFF,   // 0x0030 (48) pixels
0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0040 (64) pixels
0xFFFF, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF81F, 0x0000,   // 0x0050 (80) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF81F, 0xFFFF, 0xFFFF, 0xFFFF, 0x3DFF,   // 0x0060 (96) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF, 0x3DFF, 0xFFFF, 0xFFFF,   // 0x0070 (112) pixels
0xFFFF, 0x3DFF, 0x3DFF, 0xFFFF, 0x3DFF, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFFFF, 0xFFFF, 0x3DFF, 0x3DFF, 0x3DFF, 0xFFFF, 0xFFFF,   // 0x0080 (128) pixels
0x3DFF, 0xFFFF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xF81F,   // 0x0090 (144) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F };

const unsigned short floor1[64] PROGMEM={
0xE2C2, 0xF6B6, 0xF6B6, 0xF6B6, 0x0000, 0xE2C2, 0xF6B6, 0xE2C2, 0xF6B6, 0xE2C2, 0xE2C2, 0xE2C2, 0x0000, 0xF6B6, 0xE2C2, 0x0000,   // 0x0010 (16) pixels
0xF6B6, 0xE2C2, 0xE2C2, 0xE2C2, 0x0000, 0xE2C2, 0x0000, 0xE2C2, 0x0000, 0xE2C2, 0xE2C2, 0xE2C2, 0x0000, 0xF6B6, 0xF6B6, 0x0000,   // 0x0020 (32) pixels
0xF6B6, 0x0000, 0x0000, 0xE2C2, 0x0000, 0xF6B6, 0xE2C2, 0x0000, 0xF6B6, 0xF6B6, 0xF6B6, 0x0000, 0xF6B6, 0xE2C2, 0xE2C2, 0x0000,   // 0x0030 (48) pixels
0xF6B6, 0xE2C2, 0xE2C2, 0xF6B6, 0xE2C2, 0xE2C2, 0xE2C2, 0x0000, 0xE2C2, 0x0000, 0x0000, 0xF6B6, 0x0000, 0x0000, 0x0000, 0xE2C2,   // 0x0040 (64) pixels
};


const unsigned short hill[440] PROGMEM={
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0040 (64) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0070 (112) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0080 (128) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0000, 0x0560,   // 0x0090 (144) pixels
0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00A0 (160) pixels
0x0560, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00B0 (176) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x00D0 (208) pixels
0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x00E0 (224) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0100 (256) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000,   // 0x0110 (272) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x0120 (288) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x0130 (304) pixels
0x0560, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0140 (320) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F,   // 0x0150 (336) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x0160 (352) pixels
0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0x0560, 0x0560, 0x0560,   // 0x0170 (368) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x0180 (384) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0000, 0xF81F, 0xF81F,   // 0x0190 (400) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x01A0 (416) pixels
0x0560, 0x0560, 0x0000, 0xF81F, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560,   // 0x01B0 (432) pixels
0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560, 0x0560 };





const unsigned short marioIdle[266] PROGMEM={
0xF81F, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xFCAB,   // 0x0030 (48) pixels
0xFCAB, 0xFCAB, 0x0000, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFCAB, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB,   // 0x0040 (64) pixels
0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0x0000, 0xFCAB, 0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000,   // 0x0050 (80) pixels
0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F,   // 0x0070 (112) pixels
0xF81F, 0xF81F, 0xC300, 0xC300, 0xC300, 0xF801, 0xC300, 0xC300, 0xC300, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xC300,   // 0x0080 (128) pixels
0xC300, 0xC300, 0xC300, 0xF801, 0xC300, 0xC300, 0xF801, 0xC300, 0xC300, 0xC300, 0xC300, 0xF81F, 0xF81F, 0xC300, 0xC300, 0xC300,   // 0x0090 (144) pixels
0xC300, 0xF801, 0xC300, 0xC300, 0xF801, 0xC300, 0xC300, 0xC300, 0xC300, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300, 0xC300, 0xF801,   // 0x00A0 (160) pixels
0xF801, 0xF801, 0xF801, 0xC300, 0xC300, 0xC300, 0xC300, 0xC300, 0xFCAB, 0xFCAB, 0xC300, 0xF801, 0xF801, 0xFCAB, 0xF801, 0xF801,   // 0x00B0 (176) pixels
0xFCAB, 0xF801, 0xC300, 0xC300, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x00C0 (192) pixels
0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x00D0 (208) pixels
0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F,   // 0x00E0 (224) pixels
0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF81F, 0xC300,   // 0x00F0 (240) pixels
0xC300, 0xC300, 0xC300, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300,   // 0x0100 (256) pixels
0xC300, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300, 0xC300};



const unsigned short marioJump[361] PROGMEM={
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFCAB,   // 0x0010 (16) pixels
0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x0020 (32) pixels
0xF81F, 0xF81F, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x0030 (48) pixels
0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000, 0xFCAB, 0xF81F, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000, 0xFCAB, 0xF81F, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF81F,   // 0x0060 (96) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFCAB, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB,   // 0x0070 (112) pixels
0x7BCF, 0x7BCF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0xFCAB, 0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x0000,   // 0x0080 (128) pixels
0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x7BCF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB,   // 0x0090 (144) pixels
0xFCAB, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BCF, 0x7BCF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFCAB,   // 0x00A0 (160) pixels
0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0x7BCF, 0x7BCF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x7BCF, 0x7BCF, 0x7BCF,   // 0x00B0 (176) pixels
0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0x7BCF, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0x7BCF, 0xF81F, 0xF81F, 0xF81F,   // 0x00D0 (208) pixels
0xF81F, 0xF81F, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0xF801, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801,   // 0x00E0 (224) pixels
0xF81F, 0xF81F, 0xF81F, 0xC300, 0xFCAB, 0xFCAB, 0xFCAB, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0x7BCF, 0xF801, 0xF801, 0xF801,   // 0x00F0 (240) pixels
0xF801, 0xF801, 0xF801, 0xF81F, 0xF81F, 0xF81F, 0xC300, 0xFCAB, 0xFCAB, 0xFCAB, 0xFCAB, 0xF81F, 0xF801, 0xF801, 0x7BCF, 0xF801,   // 0x0100 (256) pixels
0xF801, 0xF801, 0xFCAB, 0xF801, 0xF801, 0xFCAB, 0xF801, 0xF801, 0xC300, 0xC300, 0xF81F, 0xFCAB, 0xFCAB, 0xF81F, 0xC300, 0xF801,   // 0x0110 (272) pixels
0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xC300, 0xC300, 0xF81F, 0xF81F, 0xC300,   // 0x0120 (288) pixels
0xC300, 0xC300, 0xC300, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xC300, 0xC300,   // 0x0130 (304) pixels
0xF81F, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x0140 (320) pixels
0xF801, 0xC300, 0xC300, 0xF81F, 0xC300, 0xC300, 0xC300, 0xC300, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801, 0xF801,   // 0x0150 (336) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xC300, 0xF81F, 0xF81F, 0xF81F, 0xF801, 0xF801, 0xF801, 0xF801, 0xF81F,   // 0x0160 (352) pixels
0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F };


#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 4000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}


Display engine_display(&display);
UI marioClock(&engine_display);


void setup() {
  Serial.begin(9600);
  // Define your display layout here, e.g. 1/8 step
  display.begin(32);
  display.setDriverChip(FM6124);
  //display.setBrightness(255);


  // Define your scan pattern here {LINE, ZIGZAG, ZAGGIZ, WZAGZIG, VZAG} (default is LINE)
  //display.setScanPattern(LINE);

  // Define multiplex implemention here {BINARY, STRAIGHT} (default is BINARY)
  //display.setMuxPattern(BINARY);
  
  
  display.clearDisplay();
  // display.setTextColor(myCYAN);
  // display.setCursor(2,0);
   //display.print("Pixel");
  // display.setTextColor(myMAGENTA);
  // display.setCursor(2,8);
  // display.print("Time");
  // display_update_enable(true);

  // delay(3000);

  display.setFont(&Super_Mario_Bros__24pt7b);

  display.fillRect(0, 0, 64, 64, 0x000E);
  display_update_enable(true);


  marioClock.init();

}


void drawImage2(const unsigned short frame[], int x, int y, int w, int h)
{
 int imageHeight = h;
 int imageWidth = w;
 int counter = 0;
 for (int yy = 0; yy < imageHeight; yy++)
 {
   for (int xx = 0; xx < imageWidth; xx++)
   {
     if (frame[counter] != MASK) {
      display.drawPixel(xx + x , yy + y, frame[counter]);
     }
     counter++;

   }
 }
}


int cnt = -26;


void displayFrame(const unsigned short frame[], int increment) {

  //display.clearDisplay();

  
  display.fillRect(cnt-increment, 40, 24, 24, 0x1110);
  //drawImage2(frame, cnt, 40);
  delay(200);
  cnt+=increment;

}



void loop() {


  if (cnt == -26) {

    
    
    marioClock.update();


    // cnt = 1;


  }


  if (cnt == -25) {

    
    drawImage2(floor1, 0, 56, 8, 8);
    drawImage2(floor1, 8, 56, 8, 8);
    drawImage2(floor1, 16, 56, 8, 8);
    drawImage2(floor1, 24, 56, 8, 8);
    drawImage2(floor1, 32, 56, 8, 8);
    drawImage2(floor1, 40, 56, 8, 8);
    drawImage2(floor1, 48, 56, 8, 8);
    drawImage2(floor1, 56, 56, 8, 8);


    //drawImage2(marioIdle, 23, 37, 14, 19);
    
    drawImage2(marioJump, 15, 27, 19, 19);


    
    drawImage2(bush, 43, 47, 21, 9);
    drawImage2(hill, 0, 34, 20, 22);
    drawImage2(cloud1, 0, 21, 13, 12);
    drawImage2(cloud2, 51, 7, 13, 12);

   
    drawImage2(block, 13, 8, 19, 19); 
    drawImage2(block, 32, 8, 19, 19);


    display.setTextColor(myBLACK);
    
    display.setCursor(15, 21);
    display.print("12");
    display.setCursor(35, 21);
    display.print("35");

    
  }


  if (cnt >= 64) {
    cnt = -24;
  }


  // cnt++;
  // delay(1000);
  // display.clearDisplay();

  // // drawImage2(0, 16);

  // if(cnt == 1)
  // {
  //   drawImage2(0, 0);
  // }
  // else if(cnt == 2){
  //   drawImage2(0, 16);
  // }
  // else if(cnt == 3){
  //   drawImage2(0, 32);
  //   cnt = 0;
  // }

}

